
using FluentAssertions;
using static Sudoku.BoardModule;
using static Sudoku.RunnerModule;
using Sudoku.Tests.Utils;

namespace Sudoku.Tests;
using static ValidatorModule;

[Trait("Solver", "SudokuBoken59")]
[Collection("RenderedSudoku")]
public class SudokuBoken59
{
    [Fact]
    public void ItResolves_One()
    {
        var res = RunSudoku(81, (x) => With(
              x[0],  x[1],  x[2],  x[3],  x[4],  x[5],  x[6],  x[7],  x[8],
              x[9], x[10], x[11], x[12], x[13], x[14], x[15], x[16], x[17],
             x[18], x[19], x[20], x[21], x[22], x[23], x[24], x[25], x[26],
             x[27], x[28], x[29], x[30], x[31], x[32], x[33], x[34], x[35],
             x[36], x[37], x[38], x[39], x[40], x[41], x[42], x[43], x[44],
             x[45], x[46], x[47], x[48], x[49], x[50], x[51], x[52], x[53],       
             x[54], x[55], x[56], x[57], x[58], x[59], x[60], x[61], x[62],        
             x[63], x[64], x[65], x[66], x[67], x[68], x[69], x[70], x[71],
             x[72], x[73], x[74], x[75], x[76], x[77], x[78], x[79], x[80]
        )).AssertValid().Take(1).ToArray();

        ("\n" + res[0].AsString(resetRenderCount: true)).Should().Be( "\n" +
            "┏━┯━┯━┯━┯━┯━┯━┯━┯━┓\n" +
            "┃2│4│6│1│3│5│8│7│9┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃1│3│5│8│7│9│2│4│6┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃8│7│9│2│4│6│1│3│5┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃5│6│3│4│1│2│7│9│8┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃4│1│2│7│9│8│5│6│3┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃7│9│8│5│6│3│4│1│2┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃6│5│4│3│2│1│9│8│7┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃3│2│1│9│8│7│6│5│4┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃9│8│7│6│5│4│3│2│1┃\n" +
            "┗━┷━┷━┷━┷━┷━┷━┷━┷━┛ 1\n"
        );
    }

    [Fact]
    public void ItResolves_No25()
    {
        var res = RunSudoku(81, (x) => With(
                 4,  x[1],  x[2],       6,     9,     7,    x[6],  x[7],  x[8],
              x[9], x[10],     3,   x[12],     4,     8,   x[15],     6, x[17],
             x[18],     6,     2,   x[21], x[22],     3,   x[24], x[25],     8,

                 5, x[28],     9,       3, x[31],     1,   x[33], x[34], x[35],
             x[36],     4,     7,       8, x[40], x[41],       1, x[43], x[44],
             x[45],     3,     1,   x[48], x[49],     6,   x[51],     9, x[53],   
             
             x[54], x[55],     6,       9,     8, x[59],   x[60], x[61],     3,        
                 1, x[64], x[65],   x[66], x[67], x[68],       8, x[70], x[71],
                 3, x[73],     4,   x[75], x[76], x[77],   x[78],     2,     9
        )).AssertValid().Take(1).ToArray();

        ("\n" + res[0].AsString(resetRenderCount: true)).Should().Be( "\n" +
            "┏━┯━┯━┯━┯━┯━┯━┯━┯━┓\n" +
            "┃4│1│8│6│9│7│3│5│2┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃7│5│3│2│4│8│9│6│1┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃9│6│2│5│1│3│4│7│8┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃5│2│9│3│7│1│6│8│4┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃6│4│7│8│2│9│1│3│5┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃8│3│1│4│5│6│2│9│7┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃2│7│6│9│8│4│5│1│3┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃1│9│5│7│3│2│8│4│6┃\n" +
            "┠─┼─┼─┼─┼─┼─┼─┼─┼─┨\n" +
            "┃3│8│4│1│6│5│7│2│9┃\n" +
            "┗━┷━┷━┷━┷━┷━┷━┷━┷━┛ 1\n"
        );
    }
}
